[package]
name = "node-subtensor-runtime"
version = "4.0.0-dev"
description = "Subtensor network"
authors = ["Opentensor Foundation <https://github.com/opentensor/>"]
homepage = "https://opentensor.ai/"
edition = "2021"
license = "Unlicense"
publish = false
repository = "https://github.com/opentensor/subtensor/"

[lints]
workspace = true

[package.metadata.docs.rs]
targets = ["x86_64-unknown-linux-gnu"]

[dependencies]
subtensor-custom-rpc-runtime-api = { version = "0.0.2", path = "../pallets/subtensor/runtime-api", default-features = false }
smallvec = { workspace = true }
log = { workspace = true }
codec = { package = "parity-scale-codec", version = "3.0.0", default-features = false, features = [
	"derive",
] }
scale-info = { workspace = true, features = ["derive"] }
serde_json = { workspace = true, features = ["alloc"] }
pallet-aura = { workspace = true }
pallet-balances = { workspace = true }
pallet-subtensor = { default-features = false, path = "../pallets/subtensor" }
frame-support = { workspace = true }
pallet-grandpa = { workspace = true }
pallet-insecure-randomness-collective-flip = { workspace = true }
frame-system = { workspace = true }
frame-try-runtime = { workspace = true, optional = true }
pallet-timestamp = { workspace = true }
pallet-transaction-payment = { workspace = true }
pallet-utility = { workspace = true }
frame-executive = { workspace = true }
sp-api = { workspace = true }
sp-block-builder = { workspace = true }
sp-consensus-aura = { workspace = true }
sp-core = { workspace = true }
sp-storage = { workspace = true }
sp-genesis-builder = { workspace = true }
sp-inherents = { workspace = true }
sp-offchain = { workspace = true }
sp-runtime = { workspace = true }
sp-session = { workspace = true }
sp-std = { workspace = true }
sp-transaction-pool = { workspace = true }
sp-version = { workspace = true }

# Temporary sudo
pallet-sudo = { workspace = true }

pallet-admin-utils = { default-features = false, path = "../pallets/admin-utils" }

# Used for sudo decentralization
pallet-collective = { default-features = false, path = "../pallets/collective" }
pallet-membership = { workspace = true }

# Multisig
pallet-multisig = { workspace = true }

# Proxy Pallet
pallet-proxy = { workspace = true }

# Scheduler pallet
pallet-scheduler = { workspace = true }
pallet-preimage = { workspace = true }

# Used for the node subtensor's RPCs
frame-system-rpc-runtime-api = { workspace = true }
pallet-transaction-payment-rpc-runtime-api = { workspace = true }

# Used for runtime benchmarking
frame-benchmarking = { workspace = true, optional = true }
frame-system-benchmarking = { workspace = true, optional = true }

# Identity registry pallet for registering project info
pallet-registry = { default-features = false, path = "../pallets/registry" }

# Metadata commitment pallet
pallet-commitments = { default-features = false, path = "../pallets/commitments" }

[dev-dependencies]
frame-metadata = { workspace = true }
sp-io = { workspace = true }
sp-tracing = { workspace = true }

[build-dependencies]
substrate-wasm-builder = { workspace = true, optional = true }

[features]
default = ["std"]
pow-faucet = ["pallet-subtensor/pow-faucet"]
std = [
	"frame-try-runtime?/std",
	"frame-system-benchmarking?/std",
	"frame-benchmarking/std",
	"codec/std",
	"scale-info/std",
	"frame-executive/std",
	"frame-support/std",
	"frame-system-rpc-runtime-api/std",
	"frame-system/std",
	"frame-try-runtime/std",
	"pallet-subtensor/std",
	"pallet-aura/std",
	"pallet-balances/std",
	"pallet-grandpa/std",
	"pallet-insecure-randomness-collective-flip/std",
	"pallet-timestamp/std",
	"pallet-transaction-payment-rpc-runtime-api/std",
	"pallet-transaction-payment/std",
	"pallet-utility/std",
	"pallet-sudo/std",
	"pallet-multisig/std",
	"pallet-proxy/std",
	"pallet-scheduler/std",
	"pallet-preimage/std",
	"pallet-commitments/std",
	"sp-api/std",
	"sp-block-builder/std",
	"sp-consensus-aura/std",
	"sp-core/std",
	"sp-inherents/std",
	"sp-offchain/std",
	"sp-runtime/std",
	"sp-session/std",
	"sp-std/std",
	"sp-transaction-pool/std",
	"sp-version/std",
	"substrate-wasm-builder",
	"pallet-collective/std",
	"pallet-membership/std",
	"pallet-registry/std",
	"pallet-admin-utils/std",
	"subtensor-custom-rpc-runtime-api/std",
	"serde_json/std",
	"sp-io/std",
	"sp-tracing/std",
	"log/std",
	"sp-storage/std",
	"sp-genesis-builder/std"
]
runtime-benchmarks = [
	"frame-benchmarking/runtime-benchmarks",
	"frame-support/runtime-benchmarks",
	"frame-system-benchmarking/runtime-benchmarks",
	"frame-system/runtime-benchmarks",
	"pallet-balances/runtime-benchmarks",
	"pallet-grandpa/runtime-benchmarks",
	"pallet-timestamp/runtime-benchmarks",
	"pallet-utility/runtime-benchmarks",
	"sp-runtime/runtime-benchmarks",
	"pallet-subtensor/runtime-benchmarks",
	"pallet-collective/runtime-benchmarks",
	"pallet-membership/runtime-benchmarks",
	"pallet-proxy/runtime-benchmarks",
	"pallet-registry/runtime-benchmarks",
	"pallet-commitments/runtime-benchmarks",
	"pallet-admin-utils/runtime-benchmarks",
	"pallet-multisig/runtime-benchmarks",
	"pallet-preimage/runtime-benchmarks",
	"pallet-scheduler/runtime-benchmarks",
	"pallet-sudo/runtime-benchmarks"
]
try-runtime = [
	"frame-try-runtime/try-runtime",
	"frame-executive/try-runtime",
	"frame-system/try-runtime",
	"frame-support/try-runtime",
	"pallet-aura/try-runtime",
	"pallet-sudo/try-runtime",
	"pallet-balances/try-runtime",
	"pallet-grandpa/try-runtime",
	"pallet-insecure-randomness-collective-flip/try-runtime",
	"pallet-timestamp/try-runtime",
	"pallet-transaction-payment/try-runtime",
	"pallet-utility/try-runtime",
	"pallet-subtensor/try-runtime",
	"pallet-collective/try-runtime",
	"pallet-membership/try-runtime",
	"pallet-proxy/try-runtime",
	"pallet-multisig/try-runtime",
	"pallet-scheduler/try-runtime",
	"pallet-preimage/try-runtime",
	"sp-runtime/try-runtime",
	"pallet-admin-utils/try-runtime",
	"pallet-commitments/try-runtime",
	"pallet-registry/try-runtime"
]
