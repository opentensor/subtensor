
//! Autogenerated weights for `pallet_subtensor`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
//! DATE: 2024-09-04, STEPS: `1`, REPEAT: `1`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `sam-desktop`, CPU: `13th Gen Intel(R) Core(TM) i9-13900KF`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("finney")`, DB CACHE: `1024`

// Executed Command:
// target/production/node-subtensor
// benchmark
// pallet
// --chain
// finney
// --wasm-execution=compiled
// --pallet
// pallet_subtensor
// --extrinsic
// *
// --steps
// 1
// --repeat
// 1
// --output
// pallets/subtensor/src/weights.rs
// --template
// ./.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for `pallet_subtensor`.
pub trait WeightInfo {
	fn benchmark_register() -> Weight;
	fn benchmark_set_weights() -> Weight;
	fn benchmark_become_delegate() -> Weight;
	fn benchmark_add_stake() -> Weight;
	fn benchmark_remove_stake() -> Weight;
	fn benchmark_serve_axon() -> Weight;
	fn benchmark_serve_prometheus() -> Weight;
	fn benchmark_burned_register() -> Weight;
	fn benchmark_root_register() -> Weight;
	fn benchmark_register_network() -> Weight;
	fn benchmark_dissolve_network() -> Weight;
	fn commit_weights() -> Weight;
	fn reveal_weights() -> Weight;
	fn schedule_swap_coldkey() -> Weight;
	fn schedule_dissolve_network() -> Weight;
	fn benchmark_sudo_set_tx_childkey_take_rate_limit() -> Weight;
	fn benchmark_set_childkey_take() -> Weight;
	fn swap_coldkey() -> Weight;
}

/// Weights for `pallet_subtensor` using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `SubtensorModule::NetworksAdded` (r:1 w:0)
	/// Proof: `SubtensorModule::NetworksAdded` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::NetworkPowRegistrationAllowed` (r:1 w:0)
	/// Proof: `SubtensorModule::NetworkPowRegistrationAllowed` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::RegistrationsThisBlock` (r:1 w:1)
	/// Proof: `SubtensorModule::RegistrationsThisBlock` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::MaxRegistrationsPerBlock` (r:1 w:0)
	/// Proof: `SubtensorModule::MaxRegistrationsPerBlock` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::RegistrationsThisInterval` (r:1 w:1)
	/// Proof: `SubtensorModule::RegistrationsThisInterval` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::TargetRegistrationsPerInterval` (r:1 w:0)
	/// Proof: `SubtensorModule::TargetRegistrationsPerInterval` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::Uids` (r:1 w:1)
	/// Proof: `SubtensorModule::Uids` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::Difficulty` (r:1 w:0)
	/// Proof: `SubtensorModule::Difficulty` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::BlockHash` (r:1 w:0)
	/// Proof: `System::BlockHash` (`max_values`: None, `max_size`: Some(44), added: 2519, mode: `MaxEncodedLen`)
	/// Storage: `SubtensorModule::Owner` (r:1 w:1)
	/// Proof: `SubtensorModule::Owner` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::OwnedHotkeys` (r:1 w:1)
	/// Proof: `SubtensorModule::OwnedHotkeys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::StakingHotkeys` (r:1 w:1)
	/// Proof: `SubtensorModule::StakingHotkeys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::SubnetworkN` (r:1 w:1)
	/// Proof: `SubtensorModule::SubnetworkN` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::MaxAllowedUids` (r:1 w:0)
	/// Proof: `SubtensorModule::MaxAllowedUids` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::Rank` (r:1 w:1)
	/// Proof: `SubtensorModule::Rank` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::Trust` (r:1 w:1)
	/// Proof: `SubtensorModule::Trust` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::Active` (r:1 w:1)
	/// Proof: `SubtensorModule::Active` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::Emission` (r:1 w:1)
	/// Proof: `SubtensorModule::Emission` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::Consensus` (r:1 w:1)
	/// Proof: `SubtensorModule::Consensus` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::Incentive` (r:1 w:1)
	/// Proof: `SubtensorModule::Incentive` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::Dividends` (r:1 w:1)
	/// Proof: `SubtensorModule::Dividends` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::LastUpdate` (r:1 w:1)
	/// Proof: `SubtensorModule::LastUpdate` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::PruningScores` (r:1 w:1)
	/// Proof: `SubtensorModule::PruningScores` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::ValidatorTrust` (r:1 w:1)
	/// Proof: `SubtensorModule::ValidatorTrust` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::ValidatorPermit` (r:1 w:1)
	/// Proof: `SubtensorModule::ValidatorPermit` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::POWRegistrationsThisInterval` (r:1 w:1)
	/// Proof: `SubtensorModule::POWRegistrationsThisInterval` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::Stake` (r:0 w:1)
	/// Proof: `SubtensorModule::Stake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::BlockAtRegistration` (r:0 w:1)
	/// Proof: `SubtensorModule::BlockAtRegistration` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::Keys` (r:0 w:1)
	/// Proof: `SubtensorModule::Keys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::UsedWork` (r:0 w:1)
	/// Proof: `SubtensorModule::UsedWork` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::IsNetworkMember` (r:0 w:1)
	/// Proof: `SubtensorModule::IsNetworkMember` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn benchmark_register() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3516`
		//  Estimated: `6981`
		// Minimum execution time: 130_164_000 picoseconds.
		Weight::from_parts(130_164_000, 6981)
			.saturating_add(T::DbWeight::get().reads(26_u64))
			.saturating_add(T::DbWeight::get().writes(24_u64))
	}
	/// Storage: `SubtensorModule::CommitRevealWeightsEnabled` (r:1 w:0)
	/// Proof: `SubtensorModule::CommitRevealWeightsEnabled` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::NetworksAdded` (r:1 w:0)
	/// Proof: `SubtensorModule::NetworksAdded` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::SubnetworkN` (r:1 w:0)
	/// Proof: `SubtensorModule::SubnetworkN` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::Uids` (r:1 w:0)
	/// Proof: `SubtensorModule::Uids` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::TotalHotkeyStake` (r:1 w:0)
	/// Proof: `SubtensorModule::TotalHotkeyStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::WeightsMinStake` (r:1 w:0)
	/// Proof: `SubtensorModule::WeightsMinStake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::WeightsVersionKey` (r:1 w:0)
	/// Proof: `SubtensorModule::WeightsVersionKey` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::Keys` (r:4096 w:0)
	/// Proof: `SubtensorModule::Keys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::LastUpdate` (r:1 w:1)
	/// Proof: `SubtensorModule::LastUpdate` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::ValidatorPermit` (r:1 w:0)
	/// Proof: `SubtensorModule::ValidatorPermit` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::MinAllowedWeights` (r:1 w:0)
	/// Proof: `SubtensorModule::MinAllowedWeights` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::MaxWeightsLimit` (r:1 w:0)
	/// Proof: `SubtensorModule::MaxWeightsLimit` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::Weights` (r:0 w:1)
	/// Proof: `SubtensorModule::Weights` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn benchmark_set_weights() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `222808`
		//  Estimated: `10361398`
		// Minimum execution time: 12_081_850_000 picoseconds.
		Weight::from_parts(12_081_850_000, 10361398)
			.saturating_add(T::DbWeight::get().reads(4107_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `SubtensorModule::MaxDelegateTake` (r:1 w:0)
	/// Proof: `SubtensorModule::MaxDelegateTake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::Owner` (r:1 w:0)
	/// Proof: `SubtensorModule::Owner` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::Delegates` (r:1 w:1)
	/// Proof: `SubtensorModule::Delegates` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::LastTxBlock` (r:1 w:1)
	/// Proof: `SubtensorModule::LastTxBlock` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::TxRateLimit` (r:1 w:0)
	/// Proof: `SubtensorModule::TxRateLimit` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::MinDelegateTake` (r:1 w:0)
	/// Proof: `SubtensorModule::MinDelegateTake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::LastTxBlockDelegateTake` (r:0 w:1)
	/// Proof: `SubtensorModule::LastTxBlockDelegateTake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn benchmark_become_delegate() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2201`
		//  Estimated: `5666`
		// Minimum execution time: 31_162_000 picoseconds.
		Weight::from_parts(31_162_000, 5666)
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(104), added: 2579, mode: `MaxEncodedLen`)
	/// Storage: `SubtensorModule::Owner` (r:1 w:0)
	/// Proof: `SubtensorModule::Owner` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::Delegates` (r:1 w:0)
	/// Proof: `SubtensorModule::Delegates` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::StakeInterval` (r:1 w:0)
	/// Proof: `SubtensorModule::StakeInterval` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::TotalHotkeyColdkeyStakesThisInterval` (r:1 w:1)
	/// Proof: `SubtensorModule::TotalHotkeyColdkeyStakesThisInterval` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::TargetStakesPerInterval` (r:1 w:0)
	/// Proof: `SubtensorModule::TargetStakesPerInterval` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::TotalColdkeyStake` (r:1 w:1)
	/// Proof: `SubtensorModule::TotalColdkeyStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::TotalHotkeyStake` (r:1 w:1)
	/// Proof: `SubtensorModule::TotalHotkeyStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::Stake` (r:1 w:1)
	/// Proof: `SubtensorModule::Stake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::TotalStake` (r:1 w:1)
	/// Proof: `SubtensorModule::TotalStake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::StakingHotkeys` (r:1 w:0)
	/// Proof: `SubtensorModule::StakingHotkeys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::LastAddStakeIncrease` (r:0 w:1)
	/// Proof: `SubtensorModule::LastAddStakeIncrease` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::LastTxBlock` (r:0 w:1)
	/// Proof: `SubtensorModule::LastTxBlock` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn benchmark_add_stake() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `6897`
		//  Estimated: `10362`
		// Minimum execution time: 78_924_000 picoseconds.
		Weight::from_parts(78_924_000, 10362)
			.saturating_add(T::DbWeight::get().reads(11_u64))
			.saturating_add(T::DbWeight::get().writes(8_u64))
	}
	/// Storage: `SubtensorModule::Owner` (r:1 w:0)
	/// Proof: `SubtensorModule::Owner` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::Delegates` (r:1 w:0)
	/// Proof: `SubtensorModule::Delegates` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::Stake` (r:1 w:1)
	/// Proof: `SubtensorModule::Stake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::StakeInterval` (r:1 w:0)
	/// Proof: `SubtensorModule::StakeInterval` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::TotalHotkeyColdkeyStakesThisInterval` (r:1 w:1)
	/// Proof: `SubtensorModule::TotalHotkeyColdkeyStakesThisInterval` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::TargetStakesPerInterval` (r:1 w:0)
	/// Proof: `SubtensorModule::TargetStakesPerInterval` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::TotalColdkeyStake` (r:1 w:1)
	/// Proof: `SubtensorModule::TotalColdkeyStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::TotalHotkeyStake` (r:1 w:1)
	/// Proof: `SubtensorModule::TotalHotkeyStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::TotalStake` (r:1 w:1)
	/// Proof: `SubtensorModule::TotalStake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(104), added: 2579, mode: `MaxEncodedLen`)
	/// Storage: `SubtensorModule::LastTxBlock` (r:0 w:1)
	/// Proof: `SubtensorModule::LastTxBlock` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn benchmark_remove_stake() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `7051`
		//  Estimated: `10516`
		// Minimum execution time: 64_406_000 picoseconds.
		Weight::from_parts(64_406_000, 10516)
			.saturating_add(T::DbWeight::get().reads(10_u64))
			.saturating_add(T::DbWeight::get().writes(7_u64))
	}
	/// Storage: `SubtensorModule::IsNetworkMember` (r:2 w:0)
	/// Proof: `SubtensorModule::IsNetworkMember` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::Axons` (r:1 w:1)
	/// Proof: `SubtensorModule::Axons` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::ServingRateLimit` (r:1 w:0)
	/// Proof: `SubtensorModule::ServingRateLimit` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn benchmark_serve_axon() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2019`
		//  Estimated: `7959`
		// Minimum execution time: 26_003_000 picoseconds.
		Weight::from_parts(26_003_000, 7959)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `SubtensorModule::IsNetworkMember` (r:2 w:0)
	/// Proof: `SubtensorModule::IsNetworkMember` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::Prometheus` (r:1 w:1)
	/// Proof: `SubtensorModule::Prometheus` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::ServingRateLimit` (r:1 w:0)
	/// Proof: `SubtensorModule::ServingRateLimit` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn benchmark_serve_prometheus() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1953`
		//  Estimated: `7893`
		// Minimum execution time: 22_138_000 picoseconds.
		Weight::from_parts(22_138_000, 7893)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `SubtensorModule::NetworksAdded` (r:1 w:0)
	/// Proof: `SubtensorModule::NetworksAdded` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::NetworkRegistrationAllowed` (r:1 w:0)
	/// Proof: `SubtensorModule::NetworkRegistrationAllowed` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::RegistrationsThisBlock` (r:1 w:1)
	/// Proof: `SubtensorModule::RegistrationsThisBlock` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::MaxRegistrationsPerBlock` (r:1 w:0)
	/// Proof: `SubtensorModule::MaxRegistrationsPerBlock` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::RegistrationsThisInterval` (r:1 w:1)
	/// Proof: `SubtensorModule::RegistrationsThisInterval` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::TargetRegistrationsPerInterval` (r:1 w:0)
	/// Proof: `SubtensorModule::TargetRegistrationsPerInterval` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::Uids` (r:1 w:1)
	/// Proof: `SubtensorModule::Uids` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::Burn` (r:1 w:0)
	/// Proof: `SubtensorModule::Burn` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(104), added: 2579, mode: `MaxEncodedLen`)
	/// Storage: `SubtensorModule::TotalIssuance` (r:1 w:1)
	/// Proof: `SubtensorModule::TotalIssuance` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::Owner` (r:1 w:1)
	/// Proof: `SubtensorModule::Owner` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::OwnedHotkeys` (r:1 w:1)
	/// Proof: `SubtensorModule::OwnedHotkeys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::StakingHotkeys` (r:1 w:1)
	/// Proof: `SubtensorModule::StakingHotkeys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::SubnetworkN` (r:1 w:1)
	/// Proof: `SubtensorModule::SubnetworkN` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::MaxAllowedUids` (r:1 w:0)
	/// Proof: `SubtensorModule::MaxAllowedUids` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::Rank` (r:1 w:1)
	/// Proof: `SubtensorModule::Rank` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::Trust` (r:1 w:1)
	/// Proof: `SubtensorModule::Trust` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::Active` (r:1 w:1)
	/// Proof: `SubtensorModule::Active` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::Emission` (r:1 w:1)
	/// Proof: `SubtensorModule::Emission` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::Consensus` (r:1 w:1)
	/// Proof: `SubtensorModule::Consensus` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::Incentive` (r:1 w:1)
	/// Proof: `SubtensorModule::Incentive` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::Dividends` (r:1 w:1)
	/// Proof: `SubtensorModule::Dividends` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::LastUpdate` (r:1 w:1)
	/// Proof: `SubtensorModule::LastUpdate` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::PruningScores` (r:1 w:1)
	/// Proof: `SubtensorModule::PruningScores` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::ValidatorTrust` (r:1 w:1)
	/// Proof: `SubtensorModule::ValidatorTrust` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::ValidatorPermit` (r:1 w:1)
	/// Proof: `SubtensorModule::ValidatorPermit` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::BurnRegistrationsThisInterval` (r:1 w:1)
	/// Proof: `SubtensorModule::BurnRegistrationsThisInterval` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::RAORecycledForRegistration` (r:1 w:1)
	/// Proof: `SubtensorModule::RAORecycledForRegistration` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::Stake` (r:0 w:1)
	/// Proof: `SubtensorModule::Stake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::BlockAtRegistration` (r:0 w:1)
	/// Proof: `SubtensorModule::BlockAtRegistration` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::Keys` (r:0 w:1)
	/// Proof: `SubtensorModule::Keys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::IsNetworkMember` (r:0 w:1)
	/// Proof: `SubtensorModule::IsNetworkMember` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn benchmark_burned_register() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4571`
		//  Estimated: `8036`
		// Minimum execution time: 109_367_000 picoseconds.
		Weight::from_parts(109_367_000, 8036)
			.saturating_add(T::DbWeight::get().reads(28_u64))
			.saturating_add(T::DbWeight::get().writes(26_u64))
	}
	/// Storage: `SubtensorModule::NetworksAdded` (r:1 w:0)
	/// Proof: `SubtensorModule::NetworksAdded` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::RegistrationsThisBlock` (r:1 w:1)
	/// Proof: `SubtensorModule::RegistrationsThisBlock` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::MaxRegistrationsPerBlock` (r:1 w:0)
	/// Proof: `SubtensorModule::MaxRegistrationsPerBlock` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::RegistrationsThisInterval` (r:1 w:1)
	/// Proof: `SubtensorModule::RegistrationsThisInterval` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::TargetRegistrationsPerInterval` (r:1 w:0)
	/// Proof: `SubtensorModule::TargetRegistrationsPerInterval` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::Uids` (r:1 w:1)
	/// Proof: `SubtensorModule::Uids` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::Owner` (r:1 w:0)
	/// Proof: `SubtensorModule::Owner` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::SubnetworkN` (r:1 w:1)
	/// Proof: `SubtensorModule::SubnetworkN` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::MaxAllowedUids` (r:1 w:0)
	/// Proof: `SubtensorModule::MaxAllowedUids` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::Rank` (r:1 w:1)
	/// Proof: `SubtensorModule::Rank` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::Trust` (r:1 w:1)
	/// Proof: `SubtensorModule::Trust` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::Active` (r:1 w:1)
	/// Proof: `SubtensorModule::Active` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::Emission` (r:1 w:1)
	/// Proof: `SubtensorModule::Emission` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::Consensus` (r:1 w:1)
	/// Proof: `SubtensorModule::Consensus` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::Incentive` (r:1 w:1)
	/// Proof: `SubtensorModule::Incentive` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::Dividends` (r:1 w:1)
	/// Proof: `SubtensorModule::Dividends` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::LastUpdate` (r:1 w:1)
	/// Proof: `SubtensorModule::LastUpdate` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::PruningScores` (r:1 w:1)
	/// Proof: `SubtensorModule::PruningScores` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::ValidatorTrust` (r:1 w:1)
	/// Proof: `SubtensorModule::ValidatorTrust` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::ValidatorPermit` (r:1 w:1)
	/// Proof: `SubtensorModule::ValidatorPermit` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SenateMembers::Members` (r:1 w:1)
	/// Proof: `SenateMembers::Members` (`max_values`: Some(1), `max_size`: Some(385), added: 880, mode: `MaxEncodedLen`)
	/// Storage: `SubtensorModule::TotalHotkeyStake` (r:1 w:0)
	/// Proof: `SubtensorModule::TotalHotkeyStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::Delegates` (r:1 w:1)
	/// Proof: `SubtensorModule::Delegates` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::BlockAtRegistration` (r:0 w:1)
	/// Proof: `SubtensorModule::BlockAtRegistration` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::Keys` (r:0 w:1)
	/// Proof: `SubtensorModule::Keys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::IsNetworkMember` (r:0 w:1)
	/// Proof: `SubtensorModule::IsNetworkMember` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn benchmark_root_register() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4386`
		//  Estimated: `7851`
		// Minimum execution time: 79_951_000 picoseconds.
		Weight::from_parts(79_951_000, 7851)
			.saturating_add(T::DbWeight::get().reads(23_u64))
			.saturating_add(T::DbWeight::get().writes(20_u64))
	}
	/// Storage: `SubtensorModule::NetworkLastRegistered` (r:1 w:1)
	/// Proof: `SubtensorModule::NetworkLastRegistered` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::NetworkRateLimit` (r:1 w:0)
	/// Proof: `SubtensorModule::NetworkRateLimit` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::NetworkLastLockCost` (r:1 w:1)
	/// Proof: `SubtensorModule::NetworkLastLockCost` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::NetworkMinLockCost` (r:1 w:0)
	/// Proof: `SubtensorModule::NetworkMinLockCost` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::NetworkLockReductionInterval` (r:1 w:0)
	/// Proof: `SubtensorModule::NetworkLockReductionInterval` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(104), added: 2579, mode: `MaxEncodedLen`)
	/// Storage: `SubtensorModule::TotalNetworks` (r:1 w:1)
	/// Proof: `SubtensorModule::TotalNetworks` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::SubnetLimit` (r:1 w:0)
	/// Proof: `SubtensorModule::SubnetLimit` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::NetworksAdded` (r:1 w:1)
	/// Proof: `SubtensorModule::NetworksAdded` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::Kappa` (r:1 w:1)
	/// Proof: `SubtensorModule::Kappa` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::Difficulty` (r:1 w:1)
	/// Proof: `SubtensorModule::Difficulty` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::ActivityCutoff` (r:1 w:1)
	/// Proof: `SubtensorModule::ActivityCutoff` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::EmissionValues` (r:1 w:1)
	/// Proof: `SubtensorModule::EmissionValues` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::RegistrationsThisInterval` (r:1 w:1)
	/// Proof: `SubtensorModule::RegistrationsThisInterval` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::POWRegistrationsThisInterval` (r:1 w:1)
	/// Proof: `SubtensorModule::POWRegistrationsThisInterval` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::BurnRegistrationsThisInterval` (r:1 w:1)
	/// Proof: `SubtensorModule::BurnRegistrationsThisInterval` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::SubnetLocked` (r:0 w:1)
	/// Proof: `SubtensorModule::SubnetLocked` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::NetworkRegisteredAt` (r:0 w:1)
	/// Proof: `SubtensorModule::NetworkRegisteredAt` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::SubnetOwner` (r:0 w:1)
	/// Proof: `SubtensorModule::SubnetOwner` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::MinAllowedWeights` (r:0 w:1)
	/// Proof: `SubtensorModule::MinAllowedWeights` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::AdjustmentInterval` (r:0 w:1)
	/// Proof: `SubtensorModule::AdjustmentInterval` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::NetworkModality` (r:0 w:1)
	/// Proof: `SubtensorModule::NetworkModality` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::MaxAllowedValidators` (r:0 w:1)
	/// Proof: `SubtensorModule::MaxAllowedValidators` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::Tempo` (r:0 w:1)
	/// Proof: `SubtensorModule::Tempo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::MinDifficulty` (r:0 w:1)
	/// Proof: `SubtensorModule::MinDifficulty` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::TargetRegistrationsPerInterval` (r:0 w:1)
	/// Proof: `SubtensorModule::TargetRegistrationsPerInterval` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::MaxWeightsLimit` (r:0 w:1)
	/// Proof: `SubtensorModule::MaxWeightsLimit` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::SubnetworkN` (r:0 w:1)
	/// Proof: `SubtensorModule::SubnetworkN` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::MinBurn` (r:0 w:1)
	/// Proof: `SubtensorModule::MinBurn` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::ImmunityPeriod` (r:0 w:1)
	/// Proof: `SubtensorModule::ImmunityPeriod` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::AdjustmentAlpha` (r:0 w:1)
	/// Proof: `SubtensorModule::AdjustmentAlpha` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::NetworkRegistrationAllowed` (r:0 w:1)
	/// Proof: `SubtensorModule::NetworkRegistrationAllowed` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::MaxDifficulty` (r:0 w:1)
	/// Proof: `SubtensorModule::MaxDifficulty` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::MaxAllowedUids` (r:0 w:1)
	/// Proof: `SubtensorModule::MaxAllowedUids` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn benchmark_register_network() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2332`
		//  Estimated: `5797`
		// Minimum execution time: 92_284_000 picoseconds.
		Weight::from_parts(92_284_000, 5797)
			.saturating_add(T::DbWeight::get().reads(16_u64))
			.saturating_add(T::DbWeight::get().writes(30_u64))
	}
	/// Storage: `SubtensorModule::NetworksAdded` (r:1 w:1)
	/// Proof: `SubtensorModule::NetworksAdded` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::SubnetOwner` (r:1 w:1)
	/// Proof: `SubtensorModule::SubnetOwner` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::SubnetIdentities` (r:1 w:0)
	/// Proof: `SubtensorModule::SubnetIdentities` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::SubnetLocked` (r:1 w:1)
	/// Proof: `SubtensorModule::SubnetLocked` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::TotalNetworks` (r:1 w:1)
	/// Proof: `SubtensorModule::TotalNetworks` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::Weights` (r:1 w:0)
	/// Proof: `SubtensorModule::Weights` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(104), added: 2579, mode: `MaxEncodedLen`)
	/// Storage: `SubtensorModule::Kappa` (r:0 w:1)
	/// Proof: `SubtensorModule::Kappa` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::Active` (r:0 w:1)
	/// Proof: `SubtensorModule::Active` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::NetworkRegisteredAt` (r:0 w:1)
	/// Proof: `SubtensorModule::NetworkRegisteredAt` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::RegistrationsThisInterval` (r:0 w:1)
	/// Proof: `SubtensorModule::RegistrationsThisInterval` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::ValidatorTrust` (r:0 w:1)
	/// Proof: `SubtensorModule::ValidatorTrust` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::EmissionValues` (r:0 w:1)
	/// Proof: `SubtensorModule::EmissionValues` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::PruningScores` (r:0 w:1)
	/// Proof: `SubtensorModule::PruningScores` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::ValidatorPermit` (r:0 w:1)
	/// Proof: `SubtensorModule::ValidatorPermit` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::MinAllowedWeights` (r:0 w:1)
	/// Proof: `SubtensorModule::MinAllowedWeights` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::BurnRegistrationsThisInterval` (r:0 w:1)
	/// Proof: `SubtensorModule::BurnRegistrationsThisInterval` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::LastUpdate` (r:0 w:1)
	/// Proof: `SubtensorModule::LastUpdate` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::NetworkModality` (r:0 w:1)
	/// Proof: `SubtensorModule::NetworkModality` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::Tempo` (r:0 w:1)
	/// Proof: `SubtensorModule::Tempo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::Difficulty` (r:0 w:1)
	/// Proof: `SubtensorModule::Difficulty` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::Dividends` (r:0 w:1)
	/// Proof: `SubtensorModule::Dividends` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::Incentive` (r:0 w:1)
	/// Proof: `SubtensorModule::Incentive` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::Trust` (r:0 w:1)
	/// Proof: `SubtensorModule::Trust` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::MaxWeightsLimit` (r:0 w:1)
	/// Proof: `SubtensorModule::MaxWeightsLimit` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::Consensus` (r:0 w:1)
	/// Proof: `SubtensorModule::Consensus` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::Emission` (r:0 w:1)
	/// Proof: `SubtensorModule::Emission` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::SubnetworkN` (r:0 w:1)
	/// Proof: `SubtensorModule::SubnetworkN` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::ImmunityPeriod` (r:0 w:1)
	/// Proof: `SubtensorModule::ImmunityPeriod` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::ActivityCutoff` (r:0 w:1)
	/// Proof: `SubtensorModule::ActivityCutoff` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::Rank` (r:0 w:1)
	/// Proof: `SubtensorModule::Rank` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::MaxAllowedUids` (r:0 w:1)
	/// Proof: `SubtensorModule::MaxAllowedUids` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::POWRegistrationsThisInterval` (r:0 w:1)
	/// Proof: `SubtensorModule::POWRegistrationsThisInterval` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn benchmark_dissolve_network() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4326`
		//  Estimated: `7791`
		// Minimum execution time: 72_036_000 picoseconds.
		Weight::from_parts(72_036_000, 7791)
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().writes(31_u64))
	}
	fn commit_weights() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 7_400_000 picoseconds.
		Weight::from_parts(7_400_000, 0)
	}
	fn reveal_weights() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 6_300_000 picoseconds.
		Weight::from_parts(6_300_000, 0)
	}
	/// Storage: `SubtensorModule::ColdkeySwapScheduled` (r:1 w:1)
	/// Proof: `SubtensorModule::ColdkeySwapScheduled` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::ColdkeySwapScheduleDuration` (r:1 w:0)
	/// Proof: `SubtensorModule::ColdkeySwapScheduleDuration` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Scheduler::Agenda` (r:1 w:1)
	/// Proof: `Scheduler::Agenda` (`max_values`: None, `max_size`: Some(10463), added: 12938, mode: `MaxEncodedLen`)
	fn schedule_swap_coldkey() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `542`
		//  Estimated: `13928`
		// Minimum execution time: 19_884_000 picoseconds.
		Weight::from_parts(19_884_000, 13928)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `SubtensorModule::DissolveNetworkScheduleDuration` (r:1 w:0)
	/// Proof: `SubtensorModule::DissolveNetworkScheduleDuration` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Scheduler::Agenda` (r:1 w:1)
	/// Proof: `Scheduler::Agenda` (`max_values`: None, `max_size`: Some(10463), added: 12938, mode: `MaxEncodedLen`)
	fn schedule_dissolve_network() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `504`
		//  Estimated: `13928`
		// Minimum execution time: 16_133_000 picoseconds.
		Weight::from_parts(16_133_000, 13928)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `SubtensorModule::TxChildkeyTakeRateLimit` (r:0 w:1)
	/// Proof: `SubtensorModule::TxChildkeyTakeRateLimit` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn benchmark_sudo_set_tx_childkey_take_rate_limit() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 11_769_000 picoseconds.
		Weight::from_parts(11_769_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `SubtensorModule::Owner` (r:1 w:0)
	/// Proof: `SubtensorModule::Owner` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::MaxChildkeyTake` (r:1 w:0)
	/// Proof: `SubtensorModule::MaxChildkeyTake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::TxChildkeyTakeRateLimit` (r:1 w:0)
	/// Proof: `SubtensorModule::TxChildkeyTakeRateLimit` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::TransactionKeyLastBlock` (r:1 w:1)
	/// Proof: `SubtensorModule::TransactionKeyLastBlock` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::ChildkeyTake` (r:0 w:1)
	/// Proof: `SubtensorModule::ChildkeyTake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn benchmark_set_childkey_take() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2182`
		//  Estimated: `5647`
		// Minimum execution time: 30_977_000 picoseconds.
		Weight::from_parts(30_977_000, 5647)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `SubtensorModule::StakingHotkeys` (r:2 w:2)
	/// Proof: `SubtensorModule::StakingHotkeys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::Owner` (r:1 w:0)
	/// Proof: `SubtensorModule::Owner` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::Identities` (r:1 w:2)
	/// Proof: `SubtensorModule::Identities` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(104), added: 2579, mode: `MaxEncodedLen`)
	/// Storage: `SubtensorModule::TotalIssuance` (r:1 w:1)
	/// Proof: `SubtensorModule::TotalIssuance` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::OwnedHotkeys` (r:2 w:2)
	/// Proof: `SubtensorModule::OwnedHotkeys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::NetworksAdded` (r:4 w:0)
	/// Proof: `SubtensorModule::NetworksAdded` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::SubnetOwner` (r:3 w:0)
	/// Proof: `SubtensorModule::SubnetOwner` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::TotalColdkeyStake` (r:2 w:2)
	/// Proof: `SubtensorModule::TotalColdkeyStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::LastTxBlock` (r:0 w:1)
	/// Proof: `SubtensorModule::LastTxBlock` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::ColdkeySwapScheduled` (r:0 w:1)
	/// Proof: `SubtensorModule::ColdkeySwapScheduled` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn swap_coldkey() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `5669`
		//  Estimated: `16559`
		// Minimum execution time: 168_995_000 picoseconds.
		Weight::from_parts(168_995_000, 16559)
			.saturating_add(T::DbWeight::get().reads(18_u64))
			.saturating_add(T::DbWeight::get().writes(13_u64))
	}
}

// For backwards compatibility and tests.
impl WeightInfo for () {
	/// Storage: `SubtensorModule::NetworksAdded` (r:1 w:0)
	/// Proof: `SubtensorModule::NetworksAdded` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::NetworkPowRegistrationAllowed` (r:1 w:0)
	/// Proof: `SubtensorModule::NetworkPowRegistrationAllowed` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::RegistrationsThisBlock` (r:1 w:1)
	/// Proof: `SubtensorModule::RegistrationsThisBlock` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::MaxRegistrationsPerBlock` (r:1 w:0)
	/// Proof: `SubtensorModule::MaxRegistrationsPerBlock` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::RegistrationsThisInterval` (r:1 w:1)
	/// Proof: `SubtensorModule::RegistrationsThisInterval` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::TargetRegistrationsPerInterval` (r:1 w:0)
	/// Proof: `SubtensorModule::TargetRegistrationsPerInterval` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::Uids` (r:1 w:1)
	/// Proof: `SubtensorModule::Uids` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::Difficulty` (r:1 w:0)
	/// Proof: `SubtensorModule::Difficulty` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::BlockHash` (r:1 w:0)
	/// Proof: `System::BlockHash` (`max_values`: None, `max_size`: Some(44), added: 2519, mode: `MaxEncodedLen`)
	/// Storage: `SubtensorModule::Owner` (r:1 w:1)
	/// Proof: `SubtensorModule::Owner` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::OwnedHotkeys` (r:1 w:1)
	/// Proof: `SubtensorModule::OwnedHotkeys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::StakingHotkeys` (r:1 w:1)
	/// Proof: `SubtensorModule::StakingHotkeys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::SubnetworkN` (r:1 w:1)
	/// Proof: `SubtensorModule::SubnetworkN` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::MaxAllowedUids` (r:1 w:0)
	/// Proof: `SubtensorModule::MaxAllowedUids` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::Rank` (r:1 w:1)
	/// Proof: `SubtensorModule::Rank` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::Trust` (r:1 w:1)
	/// Proof: `SubtensorModule::Trust` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::Active` (r:1 w:1)
	/// Proof: `SubtensorModule::Active` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::Emission` (r:1 w:1)
	/// Proof: `SubtensorModule::Emission` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::Consensus` (r:1 w:1)
	/// Proof: `SubtensorModule::Consensus` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::Incentive` (r:1 w:1)
	/// Proof: `SubtensorModule::Incentive` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::Dividends` (r:1 w:1)
	/// Proof: `SubtensorModule::Dividends` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::LastUpdate` (r:1 w:1)
	/// Proof: `SubtensorModule::LastUpdate` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::PruningScores` (r:1 w:1)
	/// Proof: `SubtensorModule::PruningScores` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::ValidatorTrust` (r:1 w:1)
	/// Proof: `SubtensorModule::ValidatorTrust` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::ValidatorPermit` (r:1 w:1)
	/// Proof: `SubtensorModule::ValidatorPermit` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::POWRegistrationsThisInterval` (r:1 w:1)
	/// Proof: `SubtensorModule::POWRegistrationsThisInterval` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::Stake` (r:0 w:1)
	/// Proof: `SubtensorModule::Stake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::BlockAtRegistration` (r:0 w:1)
	/// Proof: `SubtensorModule::BlockAtRegistration` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::Keys` (r:0 w:1)
	/// Proof: `SubtensorModule::Keys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::UsedWork` (r:0 w:1)
	/// Proof: `SubtensorModule::UsedWork` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::IsNetworkMember` (r:0 w:1)
	/// Proof: `SubtensorModule::IsNetworkMember` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn benchmark_register() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3516`
		//  Estimated: `6981`
		// Minimum execution time: 130_164_000 picoseconds.
		Weight::from_parts(130_164_000, 6981)
			.saturating_add(RocksDbWeight::get().reads(26_u64))
			.saturating_add(RocksDbWeight::get().writes(24_u64))
	}
	/// Storage: `SubtensorModule::CommitRevealWeightsEnabled` (r:1 w:0)
	/// Proof: `SubtensorModule::CommitRevealWeightsEnabled` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::NetworksAdded` (r:1 w:0)
	/// Proof: `SubtensorModule::NetworksAdded` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::SubnetworkN` (r:1 w:0)
	/// Proof: `SubtensorModule::SubnetworkN` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::Uids` (r:1 w:0)
	/// Proof: `SubtensorModule::Uids` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::TotalHotkeyStake` (r:1 w:0)
	/// Proof: `SubtensorModule::TotalHotkeyStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::WeightsMinStake` (r:1 w:0)
	/// Proof: `SubtensorModule::WeightsMinStake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::WeightsVersionKey` (r:1 w:0)
	/// Proof: `SubtensorModule::WeightsVersionKey` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::Keys` (r:4096 w:0)
	/// Proof: `SubtensorModule::Keys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::LastUpdate` (r:1 w:1)
	/// Proof: `SubtensorModule::LastUpdate` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::ValidatorPermit` (r:1 w:0)
	/// Proof: `SubtensorModule::ValidatorPermit` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::MinAllowedWeights` (r:1 w:0)
	/// Proof: `SubtensorModule::MinAllowedWeights` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::MaxWeightsLimit` (r:1 w:0)
	/// Proof: `SubtensorModule::MaxWeightsLimit` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::Weights` (r:0 w:1)
	/// Proof: `SubtensorModule::Weights` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn benchmark_set_weights() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `222808`
		//  Estimated: `10361398`
		// Minimum execution time: 12_081_850_000 picoseconds.
		Weight::from_parts(12_081_850_000, 10361398)
			.saturating_add(RocksDbWeight::get().reads(4107_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `SubtensorModule::MaxDelegateTake` (r:1 w:0)
	/// Proof: `SubtensorModule::MaxDelegateTake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::Owner` (r:1 w:0)
	/// Proof: `SubtensorModule::Owner` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::Delegates` (r:1 w:1)
	/// Proof: `SubtensorModule::Delegates` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::LastTxBlock` (r:1 w:1)
	/// Proof: `SubtensorModule::LastTxBlock` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::TxRateLimit` (r:1 w:0)
	/// Proof: `SubtensorModule::TxRateLimit` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::MinDelegateTake` (r:1 w:0)
	/// Proof: `SubtensorModule::MinDelegateTake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::LastTxBlockDelegateTake` (r:0 w:1)
	/// Proof: `SubtensorModule::LastTxBlockDelegateTake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn benchmark_become_delegate() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2201`
		//  Estimated: `5666`
		// Minimum execution time: 31_162_000 picoseconds.
		Weight::from_parts(31_162_000, 5666)
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(104), added: 2579, mode: `MaxEncodedLen`)
	/// Storage: `SubtensorModule::Owner` (r:1 w:0)
	/// Proof: `SubtensorModule::Owner` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::Delegates` (r:1 w:0)
	/// Proof: `SubtensorModule::Delegates` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::StakeInterval` (r:1 w:0)
	/// Proof: `SubtensorModule::StakeInterval` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::TotalHotkeyColdkeyStakesThisInterval` (r:1 w:1)
	/// Proof: `SubtensorModule::TotalHotkeyColdkeyStakesThisInterval` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::TargetStakesPerInterval` (r:1 w:0)
	/// Proof: `SubtensorModule::TargetStakesPerInterval` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::TotalColdkeyStake` (r:1 w:1)
	/// Proof: `SubtensorModule::TotalColdkeyStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::TotalHotkeyStake` (r:1 w:1)
	/// Proof: `SubtensorModule::TotalHotkeyStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::Stake` (r:1 w:1)
	/// Proof: `SubtensorModule::Stake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::TotalStake` (r:1 w:1)
	/// Proof: `SubtensorModule::TotalStake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::StakingHotkeys` (r:1 w:0)
	/// Proof: `SubtensorModule::StakingHotkeys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::LastAddStakeIncrease` (r:0 w:1)
	/// Proof: `SubtensorModule::LastAddStakeIncrease` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::LastTxBlock` (r:0 w:1)
	/// Proof: `SubtensorModule::LastTxBlock` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn benchmark_add_stake() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `6897`
		//  Estimated: `10362`
		// Minimum execution time: 78_924_000 picoseconds.
		Weight::from_parts(78_924_000, 10362)
			.saturating_add(RocksDbWeight::get().reads(11_u64))
			.saturating_add(RocksDbWeight::get().writes(8_u64))
	}
	/// Storage: `SubtensorModule::Owner` (r:1 w:0)
	/// Proof: `SubtensorModule::Owner` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::Delegates` (r:1 w:0)
	/// Proof: `SubtensorModule::Delegates` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::Stake` (r:1 w:1)
	/// Proof: `SubtensorModule::Stake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::StakeInterval` (r:1 w:0)
	/// Proof: `SubtensorModule::StakeInterval` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::TotalHotkeyColdkeyStakesThisInterval` (r:1 w:1)
	/// Proof: `SubtensorModule::TotalHotkeyColdkeyStakesThisInterval` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::TargetStakesPerInterval` (r:1 w:0)
	/// Proof: `SubtensorModule::TargetStakesPerInterval` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::TotalColdkeyStake` (r:1 w:1)
	/// Proof: `SubtensorModule::TotalColdkeyStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::TotalHotkeyStake` (r:1 w:1)
	/// Proof: `SubtensorModule::TotalHotkeyStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::TotalStake` (r:1 w:1)
	/// Proof: `SubtensorModule::TotalStake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(104), added: 2579, mode: `MaxEncodedLen`)
	/// Storage: `SubtensorModule::LastTxBlock` (r:0 w:1)
	/// Proof: `SubtensorModule::LastTxBlock` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn benchmark_remove_stake() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `7051`
		//  Estimated: `10516`
		// Minimum execution time: 64_406_000 picoseconds.
		Weight::from_parts(64_406_000, 10516)
			.saturating_add(RocksDbWeight::get().reads(10_u64))
			.saturating_add(RocksDbWeight::get().writes(7_u64))
	}
	/// Storage: `SubtensorModule::IsNetworkMember` (r:2 w:0)
	/// Proof: `SubtensorModule::IsNetworkMember` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::Axons` (r:1 w:1)
	/// Proof: `SubtensorModule::Axons` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::ServingRateLimit` (r:1 w:0)
	/// Proof: `SubtensorModule::ServingRateLimit` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn benchmark_serve_axon() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2019`
		//  Estimated: `7959`
		// Minimum execution time: 26_003_000 picoseconds.
		Weight::from_parts(26_003_000, 7959)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `SubtensorModule::IsNetworkMember` (r:2 w:0)
	/// Proof: `SubtensorModule::IsNetworkMember` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::Prometheus` (r:1 w:1)
	/// Proof: `SubtensorModule::Prometheus` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::ServingRateLimit` (r:1 w:0)
	/// Proof: `SubtensorModule::ServingRateLimit` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn benchmark_serve_prometheus() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1953`
		//  Estimated: `7893`
		// Minimum execution time: 22_138_000 picoseconds.
		Weight::from_parts(22_138_000, 7893)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `SubtensorModule::NetworksAdded` (r:1 w:0)
	/// Proof: `SubtensorModule::NetworksAdded` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::NetworkRegistrationAllowed` (r:1 w:0)
	/// Proof: `SubtensorModule::NetworkRegistrationAllowed` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::RegistrationsThisBlock` (r:1 w:1)
	/// Proof: `SubtensorModule::RegistrationsThisBlock` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::MaxRegistrationsPerBlock` (r:1 w:0)
	/// Proof: `SubtensorModule::MaxRegistrationsPerBlock` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::RegistrationsThisInterval` (r:1 w:1)
	/// Proof: `SubtensorModule::RegistrationsThisInterval` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::TargetRegistrationsPerInterval` (r:1 w:0)
	/// Proof: `SubtensorModule::TargetRegistrationsPerInterval` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::Uids` (r:1 w:1)
	/// Proof: `SubtensorModule::Uids` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::Burn` (r:1 w:0)
	/// Proof: `SubtensorModule::Burn` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(104), added: 2579, mode: `MaxEncodedLen`)
	/// Storage: `SubtensorModule::TotalIssuance` (r:1 w:1)
	/// Proof: `SubtensorModule::TotalIssuance` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::Owner` (r:1 w:1)
	/// Proof: `SubtensorModule::Owner` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::OwnedHotkeys` (r:1 w:1)
	/// Proof: `SubtensorModule::OwnedHotkeys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::StakingHotkeys` (r:1 w:1)
	/// Proof: `SubtensorModule::StakingHotkeys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::SubnetworkN` (r:1 w:1)
	/// Proof: `SubtensorModule::SubnetworkN` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::MaxAllowedUids` (r:1 w:0)
	/// Proof: `SubtensorModule::MaxAllowedUids` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::Rank` (r:1 w:1)
	/// Proof: `SubtensorModule::Rank` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::Trust` (r:1 w:1)
	/// Proof: `SubtensorModule::Trust` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::Active` (r:1 w:1)
	/// Proof: `SubtensorModule::Active` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::Emission` (r:1 w:1)
	/// Proof: `SubtensorModule::Emission` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::Consensus` (r:1 w:1)
	/// Proof: `SubtensorModule::Consensus` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::Incentive` (r:1 w:1)
	/// Proof: `SubtensorModule::Incentive` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::Dividends` (r:1 w:1)
	/// Proof: `SubtensorModule::Dividends` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::LastUpdate` (r:1 w:1)
	/// Proof: `SubtensorModule::LastUpdate` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::PruningScores` (r:1 w:1)
	/// Proof: `SubtensorModule::PruningScores` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::ValidatorTrust` (r:1 w:1)
	/// Proof: `SubtensorModule::ValidatorTrust` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::ValidatorPermit` (r:1 w:1)
	/// Proof: `SubtensorModule::ValidatorPermit` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::BurnRegistrationsThisInterval` (r:1 w:1)
	/// Proof: `SubtensorModule::BurnRegistrationsThisInterval` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::RAORecycledForRegistration` (r:1 w:1)
	/// Proof: `SubtensorModule::RAORecycledForRegistration` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::Stake` (r:0 w:1)
	/// Proof: `SubtensorModule::Stake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::BlockAtRegistration` (r:0 w:1)
	/// Proof: `SubtensorModule::BlockAtRegistration` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::Keys` (r:0 w:1)
	/// Proof: `SubtensorModule::Keys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::IsNetworkMember` (r:0 w:1)
	/// Proof: `SubtensorModule::IsNetworkMember` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn benchmark_burned_register() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4571`
		//  Estimated: `8036`
		// Minimum execution time: 109_367_000 picoseconds.
		Weight::from_parts(109_367_000, 8036)
			.saturating_add(RocksDbWeight::get().reads(28_u64))
			.saturating_add(RocksDbWeight::get().writes(26_u64))
	}
	/// Storage: `SubtensorModule::NetworksAdded` (r:1 w:0)
	/// Proof: `SubtensorModule::NetworksAdded` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::RegistrationsThisBlock` (r:1 w:1)
	/// Proof: `SubtensorModule::RegistrationsThisBlock` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::MaxRegistrationsPerBlock` (r:1 w:0)
	/// Proof: `SubtensorModule::MaxRegistrationsPerBlock` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::RegistrationsThisInterval` (r:1 w:1)
	/// Proof: `SubtensorModule::RegistrationsThisInterval` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::TargetRegistrationsPerInterval` (r:1 w:0)
	/// Proof: `SubtensorModule::TargetRegistrationsPerInterval` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::Uids` (r:1 w:1)
	/// Proof: `SubtensorModule::Uids` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::Owner` (r:1 w:0)
	/// Proof: `SubtensorModule::Owner` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::SubnetworkN` (r:1 w:1)
	/// Proof: `SubtensorModule::SubnetworkN` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::MaxAllowedUids` (r:1 w:0)
	/// Proof: `SubtensorModule::MaxAllowedUids` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::Rank` (r:1 w:1)
	/// Proof: `SubtensorModule::Rank` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::Trust` (r:1 w:1)
	/// Proof: `SubtensorModule::Trust` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::Active` (r:1 w:1)
	/// Proof: `SubtensorModule::Active` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::Emission` (r:1 w:1)
	/// Proof: `SubtensorModule::Emission` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::Consensus` (r:1 w:1)
	/// Proof: `SubtensorModule::Consensus` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::Incentive` (r:1 w:1)
	/// Proof: `SubtensorModule::Incentive` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::Dividends` (r:1 w:1)
	/// Proof: `SubtensorModule::Dividends` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::LastUpdate` (r:1 w:1)
	/// Proof: `SubtensorModule::LastUpdate` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::PruningScores` (r:1 w:1)
	/// Proof: `SubtensorModule::PruningScores` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::ValidatorTrust` (r:1 w:1)
	/// Proof: `SubtensorModule::ValidatorTrust` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::ValidatorPermit` (r:1 w:1)
	/// Proof: `SubtensorModule::ValidatorPermit` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SenateMembers::Members` (r:1 w:1)
	/// Proof: `SenateMembers::Members` (`max_values`: Some(1), `max_size`: Some(385), added: 880, mode: `MaxEncodedLen`)
	/// Storage: `SubtensorModule::TotalHotkeyStake` (r:1 w:0)
	/// Proof: `SubtensorModule::TotalHotkeyStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::Delegates` (r:1 w:1)
	/// Proof: `SubtensorModule::Delegates` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::BlockAtRegistration` (r:0 w:1)
	/// Proof: `SubtensorModule::BlockAtRegistration` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::Keys` (r:0 w:1)
	/// Proof: `SubtensorModule::Keys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::IsNetworkMember` (r:0 w:1)
	/// Proof: `SubtensorModule::IsNetworkMember` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn benchmark_root_register() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4386`
		//  Estimated: `7851`
		// Minimum execution time: 79_951_000 picoseconds.
		Weight::from_parts(79_951_000, 7851)
			.saturating_add(RocksDbWeight::get().reads(23_u64))
			.saturating_add(RocksDbWeight::get().writes(20_u64))
	}
	/// Storage: `SubtensorModule::NetworkLastRegistered` (r:1 w:1)
	/// Proof: `SubtensorModule::NetworkLastRegistered` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::NetworkRateLimit` (r:1 w:0)
	/// Proof: `SubtensorModule::NetworkRateLimit` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::NetworkLastLockCost` (r:1 w:1)
	/// Proof: `SubtensorModule::NetworkLastLockCost` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::NetworkMinLockCost` (r:1 w:0)
	/// Proof: `SubtensorModule::NetworkMinLockCost` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::NetworkLockReductionInterval` (r:1 w:0)
	/// Proof: `SubtensorModule::NetworkLockReductionInterval` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(104), added: 2579, mode: `MaxEncodedLen`)
	/// Storage: `SubtensorModule::TotalNetworks` (r:1 w:1)
	/// Proof: `SubtensorModule::TotalNetworks` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::SubnetLimit` (r:1 w:0)
	/// Proof: `SubtensorModule::SubnetLimit` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::NetworksAdded` (r:1 w:1)
	/// Proof: `SubtensorModule::NetworksAdded` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::Kappa` (r:1 w:1)
	/// Proof: `SubtensorModule::Kappa` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::Difficulty` (r:1 w:1)
	/// Proof: `SubtensorModule::Difficulty` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::ActivityCutoff` (r:1 w:1)
	/// Proof: `SubtensorModule::ActivityCutoff` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::EmissionValues` (r:1 w:1)
	/// Proof: `SubtensorModule::EmissionValues` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::RegistrationsThisInterval` (r:1 w:1)
	/// Proof: `SubtensorModule::RegistrationsThisInterval` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::POWRegistrationsThisInterval` (r:1 w:1)
	/// Proof: `SubtensorModule::POWRegistrationsThisInterval` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::BurnRegistrationsThisInterval` (r:1 w:1)
	/// Proof: `SubtensorModule::BurnRegistrationsThisInterval` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::SubnetLocked` (r:0 w:1)
	/// Proof: `SubtensorModule::SubnetLocked` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::NetworkRegisteredAt` (r:0 w:1)
	/// Proof: `SubtensorModule::NetworkRegisteredAt` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::SubnetOwner` (r:0 w:1)
	/// Proof: `SubtensorModule::SubnetOwner` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::MinAllowedWeights` (r:0 w:1)
	/// Proof: `SubtensorModule::MinAllowedWeights` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::AdjustmentInterval` (r:0 w:1)
	/// Proof: `SubtensorModule::AdjustmentInterval` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::NetworkModality` (r:0 w:1)
	/// Proof: `SubtensorModule::NetworkModality` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::MaxAllowedValidators` (r:0 w:1)
	/// Proof: `SubtensorModule::MaxAllowedValidators` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::Tempo` (r:0 w:1)
	/// Proof: `SubtensorModule::Tempo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::MinDifficulty` (r:0 w:1)
	/// Proof: `SubtensorModule::MinDifficulty` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::TargetRegistrationsPerInterval` (r:0 w:1)
	/// Proof: `SubtensorModule::TargetRegistrationsPerInterval` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::MaxWeightsLimit` (r:0 w:1)
	/// Proof: `SubtensorModule::MaxWeightsLimit` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::SubnetworkN` (r:0 w:1)
	/// Proof: `SubtensorModule::SubnetworkN` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::MinBurn` (r:0 w:1)
	/// Proof: `SubtensorModule::MinBurn` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::ImmunityPeriod` (r:0 w:1)
	/// Proof: `SubtensorModule::ImmunityPeriod` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::AdjustmentAlpha` (r:0 w:1)
	/// Proof: `SubtensorModule::AdjustmentAlpha` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::NetworkRegistrationAllowed` (r:0 w:1)
	/// Proof: `SubtensorModule::NetworkRegistrationAllowed` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::MaxDifficulty` (r:0 w:1)
	/// Proof: `SubtensorModule::MaxDifficulty` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::MaxAllowedUids` (r:0 w:1)
	/// Proof: `SubtensorModule::MaxAllowedUids` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn benchmark_register_network() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2332`
		//  Estimated: `5797`
		// Minimum execution time: 92_284_000 picoseconds.
		Weight::from_parts(92_284_000, 5797)
			.saturating_add(RocksDbWeight::get().reads(16_u64))
			.saturating_add(RocksDbWeight::get().writes(30_u64))
	}
	/// Storage: `SubtensorModule::NetworksAdded` (r:1 w:1)
	/// Proof: `SubtensorModule::NetworksAdded` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::SubnetOwner` (r:1 w:1)
	/// Proof: `SubtensorModule::SubnetOwner` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::SubnetIdentities` (r:1 w:0)
	/// Proof: `SubtensorModule::SubnetIdentities` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::SubnetLocked` (r:1 w:1)
	/// Proof: `SubtensorModule::SubnetLocked` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::TotalNetworks` (r:1 w:1)
	/// Proof: `SubtensorModule::TotalNetworks` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::Weights` (r:1 w:0)
	/// Proof: `SubtensorModule::Weights` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(104), added: 2579, mode: `MaxEncodedLen`)
	/// Storage: `SubtensorModule::Kappa` (r:0 w:1)
	/// Proof: `SubtensorModule::Kappa` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::Active` (r:0 w:1)
	/// Proof: `SubtensorModule::Active` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::NetworkRegisteredAt` (r:0 w:1)
	/// Proof: `SubtensorModule::NetworkRegisteredAt` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::RegistrationsThisInterval` (r:0 w:1)
	/// Proof: `SubtensorModule::RegistrationsThisInterval` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::ValidatorTrust` (r:0 w:1)
	/// Proof: `SubtensorModule::ValidatorTrust` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::EmissionValues` (r:0 w:1)
	/// Proof: `SubtensorModule::EmissionValues` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::PruningScores` (r:0 w:1)
	/// Proof: `SubtensorModule::PruningScores` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::ValidatorPermit` (r:0 w:1)
	/// Proof: `SubtensorModule::ValidatorPermit` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::MinAllowedWeights` (r:0 w:1)
	/// Proof: `SubtensorModule::MinAllowedWeights` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::BurnRegistrationsThisInterval` (r:0 w:1)
	/// Proof: `SubtensorModule::BurnRegistrationsThisInterval` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::LastUpdate` (r:0 w:1)
	/// Proof: `SubtensorModule::LastUpdate` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::NetworkModality` (r:0 w:1)
	/// Proof: `SubtensorModule::NetworkModality` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::Tempo` (r:0 w:1)
	/// Proof: `SubtensorModule::Tempo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::Difficulty` (r:0 w:1)
	/// Proof: `SubtensorModule::Difficulty` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::Dividends` (r:0 w:1)
	/// Proof: `SubtensorModule::Dividends` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::Incentive` (r:0 w:1)
	/// Proof: `SubtensorModule::Incentive` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::Trust` (r:0 w:1)
	/// Proof: `SubtensorModule::Trust` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::MaxWeightsLimit` (r:0 w:1)
	/// Proof: `SubtensorModule::MaxWeightsLimit` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::Consensus` (r:0 w:1)
	/// Proof: `SubtensorModule::Consensus` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::Emission` (r:0 w:1)
	/// Proof: `SubtensorModule::Emission` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::SubnetworkN` (r:0 w:1)
	/// Proof: `SubtensorModule::SubnetworkN` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::ImmunityPeriod` (r:0 w:1)
	/// Proof: `SubtensorModule::ImmunityPeriod` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::ActivityCutoff` (r:0 w:1)
	/// Proof: `SubtensorModule::ActivityCutoff` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::Rank` (r:0 w:1)
	/// Proof: `SubtensorModule::Rank` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::MaxAllowedUids` (r:0 w:1)
	/// Proof: `SubtensorModule::MaxAllowedUids` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::POWRegistrationsThisInterval` (r:0 w:1)
	/// Proof: `SubtensorModule::POWRegistrationsThisInterval` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn benchmark_dissolve_network() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4326`
		//  Estimated: `7791`
		// Minimum execution time: 72_036_000 picoseconds.
		Weight::from_parts(72_036_000, 7791)
			.saturating_add(RocksDbWeight::get().reads(7_u64))
			.saturating_add(RocksDbWeight::get().writes(31_u64))
	}
	fn commit_weights() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 7_400_000 picoseconds.
		Weight::from_parts(7_400_000, 0)
	}
	fn reveal_weights() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 6_300_000 picoseconds.
		Weight::from_parts(6_300_000, 0)
	}
	/// Storage: `SubtensorModule::ColdkeySwapScheduled` (r:1 w:1)
	/// Proof: `SubtensorModule::ColdkeySwapScheduled` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::ColdkeySwapScheduleDuration` (r:1 w:0)
	/// Proof: `SubtensorModule::ColdkeySwapScheduleDuration` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Scheduler::Agenda` (r:1 w:1)
	/// Proof: `Scheduler::Agenda` (`max_values`: None, `max_size`: Some(10463), added: 12938, mode: `MaxEncodedLen`)
	fn schedule_swap_coldkey() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `542`
		//  Estimated: `13928`
		// Minimum execution time: 19_884_000 picoseconds.
		Weight::from_parts(19_884_000, 13928)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `SubtensorModule::DissolveNetworkScheduleDuration` (r:1 w:0)
	/// Proof: `SubtensorModule::DissolveNetworkScheduleDuration` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Scheduler::Agenda` (r:1 w:1)
	/// Proof: `Scheduler::Agenda` (`max_values`: None, `max_size`: Some(10463), added: 12938, mode: `MaxEncodedLen`)
	fn schedule_dissolve_network() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `504`
		//  Estimated: `13928`
		// Minimum execution time: 16_133_000 picoseconds.
		Weight::from_parts(16_133_000, 13928)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `SubtensorModule::TxChildkeyTakeRateLimit` (r:0 w:1)
	/// Proof: `SubtensorModule::TxChildkeyTakeRateLimit` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn benchmark_sudo_set_tx_childkey_take_rate_limit() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 11_769_000 picoseconds.
		Weight::from_parts(11_769_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `SubtensorModule::Owner` (r:1 w:0)
	/// Proof: `SubtensorModule::Owner` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::MaxChildkeyTake` (r:1 w:0)
	/// Proof: `SubtensorModule::MaxChildkeyTake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::TxChildkeyTakeRateLimit` (r:1 w:0)
	/// Proof: `SubtensorModule::TxChildkeyTakeRateLimit` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::TransactionKeyLastBlock` (r:1 w:1)
	/// Proof: `SubtensorModule::TransactionKeyLastBlock` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::ChildkeyTake` (r:0 w:1)
	/// Proof: `SubtensorModule::ChildkeyTake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn benchmark_set_childkey_take() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2182`
		//  Estimated: `5647`
		// Minimum execution time: 30_977_000 picoseconds.
		Weight::from_parts(30_977_000, 5647)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `SubtensorModule::StakingHotkeys` (r:2 w:2)
	/// Proof: `SubtensorModule::StakingHotkeys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::Owner` (r:1 w:0)
	/// Proof: `SubtensorModule::Owner` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::Identities` (r:1 w:2)
	/// Proof: `SubtensorModule::Identities` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(104), added: 2579, mode: `MaxEncodedLen`)
	/// Storage: `SubtensorModule::TotalIssuance` (r:1 w:1)
	/// Proof: `SubtensorModule::TotalIssuance` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::OwnedHotkeys` (r:2 w:2)
	/// Proof: `SubtensorModule::OwnedHotkeys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::NetworksAdded` (r:4 w:0)
	/// Proof: `SubtensorModule::NetworksAdded` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::SubnetOwner` (r:3 w:0)
	/// Proof: `SubtensorModule::SubnetOwner` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::TotalColdkeyStake` (r:2 w:2)
	/// Proof: `SubtensorModule::TotalColdkeyStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::LastTxBlock` (r:0 w:1)
	/// Proof: `SubtensorModule::LastTxBlock` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubtensorModule::ColdkeySwapScheduled` (r:0 w:1)
	/// Proof: `SubtensorModule::ColdkeySwapScheduled` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn swap_coldkey() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `5669`
		//  Estimated: `16559`
		// Minimum execution time: 168_995_000 picoseconds.
		Weight::from_parts(168_995_000, 16559)
			.saturating_add(RocksDbWeight::get().reads(18_u64))
			.saturating_add(RocksDbWeight::get().writes(13_u64))
	}
}